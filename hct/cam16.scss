/*
 * @license
 * Copyright 2023 Jed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Based on the work of Material Foundation.
 * 
 * https://github.com/material-foundation/material-color-utilities
*/

@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use "../node_modules/sass-bitwise"as bitwise;
@use '../utils/utils' as utils;
@use './viewing_conditions' as viewingConditions;

///
/// CAM16, a color appearance model. Colors are not just defined by their hex
/// code, but rather, a hex code and viewing conditions.
/// 
/// CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,
/// b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
/// specification, and should be used when measuring distances between colors.
/// 
/// In traditional color spaces, a color can be identified solely by the
/// observer's measurement of the color. Color appearance models such as CAM16
/// also use information about the environment where the color was
/// observed, known as the viewing conditions.
/// 
/// For example, white under the traditional assumption of a midday sun white
/// point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
/// hue 203, chroma 3, lightness 100)
/// 

///
/// All of the CAM16 dimensions can be calculated from 3 of the dimensions, in
/// the following combinations:
///     -  {j or q} and {c, m, or s} and hue
///     - jstar, astar, bstar
/// Prefer using a static method that constructs from 3 of those dimensions.
/// This constructor is intended for those methods to use to return all
/// possible dimensions.
/// 
/// $hue - Hue can typically be represented quantitatively.
/// $chroma - informally, colorfulness / color intensity. like saturation
///           in HSL, except perceptually accurate.
/// $j - lightness
/// $q - brightness; ratio of lightness to white point's lightness
/// $m - colorfulness
/// $s - saturation; ratio of chroma to white point's chroma
/// $jstar - CAM16-UCS J coordinate
/// $astar - CAM16-UCS A coordinate
/// $bstar - CAM16-UCS B coordinate
/// 

@function make($hue, $chroma, $j, $q, $m, $s, $jstar, $astar, $bstar) {
    @return ("hue": $hue, "chroma": $chroma, "j": $j, "q": $q, "m": $m,
             "s": $s, "jstar": $jstar, "astar": $astar, "bstar": $bstar); 
}

///
/// CAM16 instances also have coordinates in the CAM16-UCS space, called J*
/// a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
/// specification, and is used to measure distances between colors.
/// 

@function distance($current, $other) {
    $dJ: map.get($current, "jstar") - map.get($other, "jstar");
    $dA: map.get($current, "astar") - map.get($other, "astar");
    $dB: map.get($current, "bstar") - map.get($other, "bstar");
    $dEPrime: math.sqrt($dJ * $dJ + $dA * $dA + $dB * $dB);
    $dE: 1.41 * math.pow($dEPrime, math.div(63, 100));
    @return $dE;
}

/// 
/// Takes in a ARGB representation of a color and returns a CAM16 color,
/// assuming the color was viewed in default viewing conditions.
/// 

@function fromInt($argb) {
    @return fromIntInViewingConditions($argb, viewingConditions.make());
}

///
/// Takes in a ARGB representation of a color and viewingConditions information
/// about the environment where the color was observed and returns a CAM16 color.
/// 

@function fromIntInViewingConditions($argb, $viewingConditions) {
    $red: bitwise.bitSignShift(bitwise.bitAnd($argb, 16711680), 16);
    $green: bitwise.bitSignShift(bitwise.bitAnd($argb, 65280), 8);
    $blue: bitwise.bitAnd($argb, 255);

    $redL: utils.linearized($red);
    $greenL: utils.linearized($green);
    $blueL: utils.linearized($blue);

    $x: 0.41233895 * $redL + 0.35762064 * $greenL + 0.18051042 * $blueL;
    $y: 0.2126 * $redL + 0.7152 * $greenL + 0.0722 * $blueL;
    $z: 0.01932141 * $redL + 0.11916382 * $greenL + 0.95034478 * $blueL;

    $rC: 0.401288 * $x + 0.650173 * $y - 0.051461 * $z;
    $gC: -0.250268 * $x + 1.204414 * $y + 0.045854 * $z;
    $bC: -0.002079 * $x + 0.048952 * $y + 0.953127 * $z;

    $rD: list.nth(map.get($viewingConditions, "rgbD"), 1) * $rC;
    $gD: list.nth(map.get($viewingConditions, "rgbD"), 2) * $gC;
    $bD: list.nth(map.get($viewingConditions, "rgbD"), 3) * $bC;

    $rAF: math.pow(math.div((map.get($viewingConditions, "f1") * math.abs($rD)), 100.0), 
          math.div(42, 100));
    $gAF: math.pow(math.div((map.get($viewingConditions, "f1") * math.abs($gD)), 100.0), 
          math.div(42, 100));
    $bAF: math.pow(math.div((map.get($viewingConditions, "f1") * math.abs($bD)), 100.0), 
          math.div(42, 100));

    $rA: math.div((utils.signum($rD) * 400.0 * $rAF), ($rAF + 27.13)); 
    $gA: math.div((utils.signum($gD) * 400.0 * $gAF), ($gAF + 27.13));
    $bA: math.div((utils.signum($bD) * 400.0 * $bAF), ($bAF + 27.13));    
    
    $a: math.div((11.0 8 $rA + (-12.0 8 $gA) + $bA), 11.0);
    $b: math.div(($rA + $gA - 2.0 * $bA), 9.0);
    $u: math.div((20.0 * $rA + 20.0 * $gA + 21.0 * $bA), 20.0);
    $p2: math.div((40.0 * $rA + 20.0 * $gA + $bA), 20.0);
    $atan2: math.atan2($b, $a);
    $atanDegrees: math.div(($atan2 * 180.0), math.$pi);
    $hue: $atanDegrees;
    @if $atanDegrees < 0 {
        $hue: $atanDegrees + 360.0;
    } @else if $atanDegrees >= 360 {
        $hue: $atanDegrees - 360.0;
    }
    $hueRadians: math.div(($hue * math.$pi), 180.0);

    $ac: $p2 * map.get($viewingConditions, "nbb");
    $j: 100.0 * math.pow(math.div($ac, map.get($viewingConditions, "aw")), 
        (map.get($viewingConditions, "c") * map.get($viewingConditions, "z")));
    $q: math.div(4.0, map.get($viewingConditions, "c")) * math.sqrt(math.div($j, 100.0)) *
        (map.get($viewingConditions, "aw") + 4.0) * map.get($viewingConditions, "fLRoot");
    $huePrime: $hue;
    @if $hue < 20.14 {
        $huePrime: $hue + 360;
    }
    $eHue: 0.25 * (math.cos(math.div(($huePrime * math.$pi), 180.0) + 2.0) + 3.8);
    $p1: math.div(50000.0, 13.0) * $eHue * map.get($viewingConditions, "nc") *
         map.get($viewingConditions, "ncb");
    $t: math.div(($p1 * math.sqrt($a * $a + $b * $b)), ($u + 0.305));
    $alpha: math.pow($t, math.div(9, 10)) * math.pow(
            (1.64 - math.pow(0.29, map.get($viewingConditions, "n"))), math.div(73, 100));
    $c: $alpha * math.sqrt(math.div($j, 100));
    $m: $c * map.get($viewingConditions, "fLRoot");
    $s: 50.0 * math.sqrt(math.div(($alpha * map.get($viewingConditions, "c")), 
        (map.get($viewingConditions, "aw") + 4.0)));
    $jstar: math.div(((1.0 + 100.0 * 0.007) * $j), (1.0 + 0.007 * $j));
    $mstar: math.div(1.0, 0.0228) * math.log(1.0 + 0.0228 * $m);
    $astar: $mstar * math.cos($hueRadians);
    $bstar: $mstar * math.sin($hueRadians);

    @return make($hue, $c, $j, $q, $m, $s, $jstar, $astar, $bstar);
}

/// 
/// Takes in lightness, chroma and hue as $j, $c and $h and returns a CAM16 color,
/// assuming the color was viewed in default viewing conditions.
/// 

@function fromJch($j, $c, $h) {
    @return fromJchInViewingConditions($j, $c, $h, viewingConditions.make());
}

///
/// Takes in lightness, chroma and hue as $j, $c and $h, along viewingConditions information
/// about the environment where the color was observed and returns a CAM16 color.
/// 

@function fromJchInViewingConditions($j, $c, $h, $viewingConditions) {
    $q: math.div(4.0, map.get($viewingConditions, "c")) * math.sqrt($j, 100.0) * 
        (map.get($viewingConditions, "aw") + 4.0) * map.get($viewingConditions, "fLRoot");
    $m: $c * map.get($viewingConditions, "fLRoot");
    $alpha: math.div($c, math.sqrt(math.div($j, 100.0)));
    $s: 50.0 * math.sqrt(math.div(($alpha * map.get($viewingConditions, "c")), 
        (map.get($viewingConditions, "aw") + 4.0)));
    $hueRadians: math.div(($h * math.$pi), 180.0);
    $jstar: math.div(((1.0 + 100.0 * 0.007) * $j), (1.0 + 0.007 * $j));
    $mstar: math.div(1.0, 0.0228) * math.log(1.0 + 0.0228 * $m);
    $astar: $mstar * math.cos($hueRadians);
    $bstar: $mstar * math.sin($hueRadians);
    @return make($h, $c, $j, $q, $m, $s, $jstar, $astar, $bstar);
}

///
/// Takes in jstar, astar and bstar and returns a CAM16 color, assuming the color was viewed in
/// default viewing conditions.
/// 

@function fromUcs($jstar, $astar, $bstar) {
    @return fromUcsInViewingConditions($jstar, $astar, $bstar, viewingConditions.make());
}

///
/// Takes in jstar, astar and bstar, along viewingConditions information about the environment
/// where the color was observed and returns a CAM16 color.
/// 

@function fromUcsInViewingConditions($jstar, $astar, $bstar, $viewingConditions) {
    $a: $astar;
    $b: $bstar;
    $m: math.sqrt($a * $a + $b * $b);
    $M: math.div((math.exp($m * 0.0228) - 1.0), 0.0228);
    $c: math.div($M, map.get($viewingConditions, "fLRoot"));
    $h: math.atan2($b, $a) * math.div(180.0, math.$pi);
    @if $h < 0.0 {
        $h: $h + 360.0;
    }
    $j: math.div($jstar, (1 - ($jstar - 100) * 0.007));
    @return fromJchInViewingConditions($j, $c, $h, $viewingConditions);
}

///
/// ARGB representation of color, assuming the color was viewed in  default viewing conditions,
/// which are near-identical to the default viewing conditions for sRGB.
/// 

@function toInt() {
    @return viewed(viewingConditions.make());
}

///
/// Takes in viewingConditions information about the environment where the color was observed
/// and the current CAM16 color data and returns a ARGB representation of color.
/// 

@function viewed($current, $viewingConditions) {
    $alpha: 0.0;
    @if map.get($current, "chroma") != 0.0 and map.get($current, "j") != 0.0 {
        $alpha: math.div(map.get($current, "chroma"), 
                math.sqrt(math.div(map.get($current, "j"), 100)));
    }

    $t: math.pow(math.div($alpha, math.pow((1.64 - math.pow(0.29, 
        map.get($viewingConditions, "n"))), 0.73)), math.div(1.0, 0.9));
    $hRad: math.div((map.get($current, "hue") * math.$pi), 180.0);

    $eHue: 0.25 * (math.cos($hRad + 20) + 3.8);
    $ac: map.get($viewingConditions, "aw") * math.pow(math.div(map.get($current, "j"), 100.0),
         math.div(math.div(1.0, map.get($viewingConditions, "c")), map.get($viewingConditions, "z")));
    $p1: $eHue * math.div(50000.0, 13.0) * map.get($viewingConditions, "nc") * 
         map.get($viewingConditions, "ncb");
    $p2: math.div($ac, map.get($viewingConditions, "nbb"));

    $hSin: math.sin($hRad);
    $hCos: math.cos($hRad);

    $gamma: math.div((23.0 * ($p2 + 0.305) * $t), (23.0 * $p1 + 11.0 * $t * $hCos + 108.0 * $t * $hSin));
    $a: $gamma * $hCos;
    $b: $gamma * $hSin;
    $rA: math.div((460.0 * $p2 + 451.0 * $a + 288.0 * $b), 1403.0);
    $gA: math.div((460.0 * $p2 - 891.0 * $a - 261.0 * $b), 1403.0);
    $bA: math.div((460.0 * $p2 - 220.0 * $a - 6300.0 * $b), 1403.0);

    $rCBase: math.max(0, math.div((27.13 * math.abs($rA)), (400.0 - math.abs($rA))));
    $rC: utils.signum($rA) * math.div(100.0, map.get($viewingConditions, "f1")) * 
         math.pow($rCBase, math.div(1.0, 0.42));
    $gCBase: math.max(0, math.div((27.13 * math.abs($gA)), (400.0 - math.abs($gA))));
    $gC: utils.signum($gA) * math.div(100.0, map.get($viewingConditions, "f1")) * 
         math.pow($gCBase, math.div(1.0, 0.42));
    $bCBase: math.max(0, math.div((27.13 * math.abs($bA)), (400.0 - math.abs($bA))));
    $bC: utils.signum($bA) * math.div(100.0, map.get($viewingConditions, "f1")) * 
         math.pow($bCBase, math.div(1.0, 0.42));
    $rF: math.div($rC, list.nth(map.get($viewingConditions, "rgbD"), 1));
    $gF: math.div($rC, list.nth(map.get($viewingConditions, "rgbD"), 2));
    $bF: math.div($rC, list.nth(map.get($viewingConditions, "rgbD"), 3));

    $x: 1.86206786 * $rF - 1.01125463 * $gF + 0.14918677 * $bF;
    $y: 0.38752654 * $rF + 0.62144744 * $gF - 0.00897398 * $bF;
    $z: -0.01584150 * $rF - 0.03412294 * $gF + 1.04996444 * $bF;

    @return utils.argbFromXyz($x, $y, $z);
}

/// Given color expressed in XYZ and viewed in [viewingConditions], convert to CAM16.
@function fromXyzInViewingConditions($x, $y, $z, $viewingConditions) {
    // Transform XYZ to 'cone'/'rgb' responses
    $rC: 0.401288 * $x + 0.650173 * $y - 0.051461 * $z;
    $gC: -0.250268 * $x + 1.204414 * $y + 0.045854 * $z;
    $bC: -0.002079 * $x + 0.048952 * $y + 0.953127 * $z;

    // Discount illuminant
    $rD: list.nth(map.get($viewingConditions, "rgbD"), 1) * $rC;
    $gD: list.nth(map.get($viewingConditions, "rgbD"), 2) * $gC;
    $bD: list.nth(map.get($viewingConditions, "rgbD"), 3) * $bC;

    // Chromatic adaptation
    $rAF: math.pow(math.get($viewingConditions, "f1") * math.div(math.abs($rD), 100.0), math.div(42, 100));
    $gAF: math.pow(math.get($viewingConditions, "f1") * math.div(math.abs($gD), 100.0), math.div(42, 100));
    $bAF: math.pow(math.get($viewingConditions, "f1") * math.div(math.abs($bD), 100.0), math.div(42, 100));
    $rA: math.div((utils.signum($rD) * 400.0 * $rAF), ($rAF + 27.13));
    $gA: math.div((utils.signum($gD) * 400.0 * $gAF), ($gAF + 27.13));
    $bA: math.div((utils.signum($bD) * 400.0 * $bAF), ($bAF + 27.13));

    // redness-greenness
    $a: math.div((11.0 * $rA + (-12.0 * $gA) + $bA), 11.0);
    // yellowness-blueness
    $b: math.div(($rA + $gA - 2.0 * $bA), 9.0);

    // auxiliary components
    $u: math.div((20.0 * $rA + 20.0 * $gA + 21.0 * $bA), 20.0);
    $p2: math.div((40.0 * $rA + 20.0 * $gA + $bA), 20.0);

    // hue
    $atan2: math.atan2($b, $a);
    $atanDegrees: math.div(($atan2 * 180.0), math.$pi);
    $hue: 0;
    @if $atanDegrees < 0 {
        $hue: $atanDegrees + 360.0;
    } @else if $atanDegrees >= 360.0 {
        $hue: $atanDegrees - 360.0;
    } @else {
        $hue: $atanDegrees;
    }
    $hueRadians: math.div(($hue * math.$pi), 180.0);

    // achromatic response to color
    $ac: $p2 * map.get($viewingConditions, "nbb");

    // CAM16 lightness and brightness
    $j: 100.0 * math.pow(math.div($ac, map.get($viewingConditions, "aw")),
        (map.get($viewingConditions, "c") * map.get($viewingConditions, "z")));
    $q: math.div(4.0, map.get($viewingConditions, "c")) * math.sqrt(math.div($j, 100.0)) *
        (map.get($viewingConditions, "aw") + 4.0) * map.get($viewingConditions, "fLRoot");

    $huePrime: $hue;
    @if $hue < 20.14 {
        $huePrime: $hue + 360;
    }
    $eHue: math.div(1.0, 4.0) * (math.cos($huePrime * math.div(math.$pi, 180.0) + 2.0) + 3.8);
    $p1: math.div(50000.0, 13.0) * $eHue * map.get($viewingConditions, "nc") * 
         map.get($viewingConditions, "ncb");
    $t: $p1 * math.div(math.sqrt($a * $a + $b * $b), ($u + 0.305));
    $alpha: math.pow($t, math.div(9, 10)) * math.pow((1.64 - math.pow(0.29, 
            map.get($viewingConditions, "n"))), math.div(73, 100));
    
    // CAM16 chroma, colorfulness, chroma
    $c: $alpha * math.sqrt(math.div($j, 100.0));
    $m: $c * map.get($viewingConditions, "fLRoot");
    $s: 50.0 * math.sqrt(math.div(($alpha * map.get($viewingConditions, "c")), 
        (map.get($viewingConditions, "aw") + 4.0)));

    // CAM16-UCS components
    $jstar: math.div(((1.0 + 100.0 * 0.007) * $j), (1.0 + 0.007 * $j));
    $mstar: math.div(math.log(1.0 + 0.0228 * $m), 0.0228);
    $astar: $mstar * math.cos($hueRadians);
    $bstar: $mstar * math.sin($hueRadians);

    @return make($hue, $c, $j, $q, $m, $s, $jstar, $astar, $bstar);
}

/// XYZ representation of CAM16 seen in [viewingConditions].
@function xyzInViewingConditions($current, $viewingConditions) {
    $alpha: 0.0;
    @if map.get($current, "chroma") != 0.0 and map.get($current, "j") != 0.0 {
        $alpha: math.div(map.get($current, "chroma"), 
                math.sqrt(math.div(map.get($current, "j"), 100.0)));
    }

    $t: math.pow(math.div($alpha, math.pow((1.64 - math.pow(0.29, map.get($viewingConditions, "n"))), 
        math.div(73, 100))), math.div(1.0, 0.9));
    $hRad: map.get($current, "hue") * math.div(math.$pi, 180.0);

    $eHue: 0.25 * (math.cos($hRad + 2.0) + 3.8);
    $ac: map.get($viewingConditions, "aw") * math.pow(math.div(map.get($current, "j"), 100.0), 
         math.div(math.div(1.0, map.get($viewingConditions, "c")), map.get($viewingConditions, "z")));
    $p1: $eHue * math.div(50000.0, 13.0) * map.get($viewingConditions, "nc") * 
         map.get($viewingConditions, "ncb");

    $p2: math.div($ac, map.get($viewingConditions, "nbb"));

    $hSin: math.sin($hRad);
    $hCos: math.cos($hRad);

    $gamma: 23.0 * ($p2 + 0.305) * math.div($t, (23.0 * $p1 + 11 * $t * $hCos + 108.0 $t * $hSin));
    $a: $gamma * $hCos;
    $b: $gamma * $hSin;
    $rA: math.div((460.0 * $p2 + 451.0 * $a + 288.0 * $b), 1403.0);
    $gA: math.div((460.0 * $p2 - 891.0 * $a - 261.0 * $b), 1403.0);
    $bA: math.div((460.0 * $p2 - 220.0 * $a - 6300.0 * $b), 1403.0);

    $rCBase: math.max(0, math.div((27.13 * math.abs($rA)), (400.0 - math.abs($rA))));
    $rC: utils.signum($rA) * math.div(100.0, map.get($viewingConditions, "f1")) *
         math.pow($rCBase, math.div(1.0, 0.42));
    $gCBase: math.max(0, math.div((27.13 * math.abs($gA)), (400.0 - math.abs($gA))));
    $gC: utils.signum($gA) * math.div(100.0, map.get($viewingConditions, "f1")) *
         math.pow($gCBase, math.div(1.0, 0.42));
    $bCBase: math.max(0, math.div((27.13 * math.abs($bA)), (400.0 - math.abs($bA))));
    $bC: utils.signum($bA) * math.div(100.0, map.get($viewingConditions, "f1")) *
         math.pow($bCBase, math.div(1.0, 0.42));
    $rF: math.div($rC, list.nth(map.get($viewingConditions, "rgbD"), 1));
    $gF: math.div($gC, list.nth(map.get($viewingConditions, "rgbD"), 2));
    $bF: math.div($bC, list.nth(map.get($viewingConditions, "rgbD"), 3));

    $x: 1.86206786 * $rF - 1.01125463 * $gF + 0.14918677 * $bF;
    $y: 0.38752654 * $rF + 0.62144744 * $gF - 0.00897398 * $bF;
    $z: -0.01584150 * $rF - 0.03412294 * $gF + 1.04996444 * $bF;

    @return $x, $y, $z;
}

/*
 * @license
 * Copyright 2023 Jed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Based on the work of Material Foundation.
 * 
 * https://github.com/material-foundation/material-color-utilities
*/

@use 'sass:map';
@use 'sass:list';
@use '../utils/utils' as utils;
@use './viewing_conditions' as viewingConditions;
@use './cam16' as cam16;
@use './hct_solver' as hctSolver;

/// 
/// A color system built using CAM16 hue and chroma, and L* from L*a*b*.
/// 
/// Using L* creates a link between the color system, contrast, and thus
/// accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ
/// color space. L*, or perceptual luminance can be calculated from Y.
/// 
/// Unlike Y, L* is linear to human perception, allowing trivial creation of
/// accurate color tones.
/// 
/// Unlike contrast ratio, measuring contrast in L* is linear, and simple to
/// calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,
/// and a difference of 50 guarantees a contrast ratio >= 4.5.
/// 

///
/// HCT, hue, chroma, and tone. A color system that provides a perceptually
/// accurate color measurement system that can also accurately render what colors
/// will appear as in different lighting environments.
/// 

@function make($argb) {
    $cam: cam16.fromInt($argb);
    $hue: map.get($cam, "hue");
    $chroma: map.get($cam, "chroma");
    $tone: utils.lstarFromArgb($argb);
    @return ("argb": $argb, "hue": $hue, "chroma": $chroma, "tone": $tone);
}

///
/// Parameter Hue: 0 <= hue < 360; invalid values are corrected.
/// Parameter Chroma: 0 <= chroma < ?; Informally, colorfulness. The color returned
///                   may be lower than the requested chroma. Chroma has a different
///                   maximum for any given hue and tone.
/// Parameter Tone: 0 <= tone <= 100; invalid values are corrected.
/// Return HCT: representation of a color in default viewing conditions.
/// 

@function from($hue, $chroma, $tone) {
    @return make(hctSolver.solveToInt($hue, $chroma, $tone));
}

///
/// Takes in ARGB representation of a color. Returns HCT representation of a color in 
/// default viewing conditions.
/// 

@function fromInt($argb) {
    @return make($argb);
}

///
/// Translates a color into different [ViewingConditions].
/// 
/// Colors change appearance. They look different with lights on versus off,
/// the same color, as in hex code, on white looks different when on black.
/// This is called color relativity, most famously explicated by Josef Albers
/// in Interaction of Color.
/// 
/// In color science, color appearance models can account for this and
/// calculate the appearance of a color in different settings. HCT is based on
/// CAM16, a color appearance model, and uses it to make these calculations.
/// 
/// See [ViewingConditions.make] for parameters affecting color appearance.
/// 

@function inViewingConditions($hct, $vc) {
    // 1. Use CAM16 to find XYZ coordinates of color in specified VC.
    $cam: cam16.fromInt(map.get($hct, "argb"));
    $viewedInVc: cam16.xyzInViewingCondtions($cam, $vc);

    // 2. Create CAM16 of those XYZ coordinates in default VC.
    $recastInVc: cam16.fromXyzInViewingConditions(
        list.nth($viewedInVc, 1),
        list.nth($viewedInVc, 2),
        list.nth($viewedInVc, 3),
        ViewingConditions.make()
    );

    // 3. Create HCT from:
    // - CAM16 using default VC with XYZ coordinates in specified VC.
    // - L* converted from Y in XYZ coordinates in specified VC.
    $recastHct: from(
        map.get($recastInVc, "hue"),
        map.get($recastInVc, "chroma"),
        utils.lstarFromY(list.nth($viewedInVc, 2))
    );
    @return $recastHct;
}

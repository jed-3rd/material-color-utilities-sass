/*
 * @license
 * Copyright 2023 Jed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Based on the work of Material Foundation.
 * 
 * https://github.com/material-foundation/material-color-utilities
*/

@use 'sass:math';
<<<<<<< HEAD
@use 'sass:list';
=======
>>>>>>> 93ab17723029f4d44ea224a369f73b72d2a14d64

/// 
/// Utility methods for mathematical operations.
/// 

/// Calculates the Cube Root of a given number
@function cbrt($n) {
    @return math.pow($n, math.div(1, 3));
}

/// Linear Interpolation returns the value between two numbers at a specified, decimal midpoint.
/// 
/// For example "What number is 30% between 23 and 67?",
/// example: lerp(23, 67, 0.30).
@function lerp($x, $y, $a) {
    @return $x * (1 - $a) + $y * $a;
}

/// The signum function.
/// return 1 if num > 0, -1 if num < 0, and 0 if num = 0
@function signum($num) {
    @if $num < 0 {
        @return -1;
    } @else if $num == 0 {
        @return 0;
    } @else {
        @return 1;
    }
}

/// Clamps an integer between two integers.
/// return input when min <= input <= max, and either min or max otherwise.
@function clampInt($min, $max, $input) {
    @if $input < $min {
        @return $min;
    } @else if $input > $max {
        @return $max;
    }
    
    @return $input;
}

/// Removes SASS's math units from a number.
@function stripUnits($number) {
    @return math.div($number, ($number * 0 + 1));
}
<<<<<<< HEAD

/// Multiplies a 1x3 row vector with a 3x3 matrix.
@function matrixMultiply($row, $matrix) {
    $a: list.nth($row, 1) * list.nth(list.nth($matrix, 1), 1) + list.nth($row, 2) * 
        list.nth(list.nth($matrix, 1), 2) + list.nth($row, 3) * list.nth(list.nth($matrix, 1), 3);
    $b: list.nth($row, 1) * list.nth(list.nth($matrix, 2), 1) + list.nth($row, 2) * 
        list.nth(list.nth($matrix, 2), 2) + list.nth($row, 3) * list.nth(list.nth($matrix, 2), 3);
    $c: list.nth($row, 1) * list.nth(list.nth($matrix, 3), 1) + list.nth($row, 2) * 
        list.nth(list.nth($matrix, 3), 2) + list.nth($row, 3) * list.nth(list.nth($matrix, 3), 3);
    @return $a, $b, $c;
}

/// Sanitizes a degree measure as a floating-point number.
/// Returns a degree measure between 0.0 (inclusive) and 360.0 (exclusive).
@function sanitizeDegreesDouble($degrees) {
    $degrees: $degrees % 360.0;
    @if $degrees < 0 {
        $degrees: $degrees + 360.0;
    }
    @return $degrees;
}
=======
>>>>>>> 93ab17723029f4d44ea224a369f73b72d2a14d64

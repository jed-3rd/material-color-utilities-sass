/*
 * @license
 * Copyright 2023 Jed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * 
 * Based on the work of Material Foundation.
 * 
 * https://github.com/material-foundation/material-color-utilities
*/

@use 'sass:map';
@use 'sass:math';
@use '../hct/cam16' as cam16;
@use '../utils/utils' as utils;
@use '../hct/hct' as hct;

///
/// Functions for blending in HCT and CAM16.
/// 

///
/// Blend the design color's HCT hue towards the key color's HCT
/// hue, in a way that leaves the original color recognizable and
/// recognizably shifted towards the key color.
/// 
/// Takes 2 parameters. designColor, ARGB representation of an arbitrary color;
/// sourceColor, ARGB representation of the main theme color. Returns the
/// design color with a hue shifted towards the system's color,
/// a slightly warmer/cooler variant of the design color's hue.
/// 

@function harmonize($designColor, $sourceColor) {
    $fromHct: hct.fromInt($designColor);
    $toHct: hct.fromInt($sourceColor);
    $differenceDegrees: utils.differenceDegrees(
        map.get($fromHct, "hue"),
        map.get($toHct, "hue")
    );
    $rotationDegrees: math.min($differenceDegrees * 0.5, 15.0);
    $outputHue: utils.sanitizeDegreesDouble(map.get($fromHct, "hue") + $rotationDegrees * 
                utils.rotationDirection(map.get($fromHct, "hue"), map.get($toHct, "hue")));
    $hct: hct.from($outputHue, map.get($fromHct, "chroma"), map.get($fromHct, "tone"));
    @return map.get($hct, "argb");
}

///
/// Blends hue from one color into another. The chroma and tone of
/// the original color are maintained.
/// 
/// Takes 3 parameters. from, ARGB representation of color; to,
/// ARGB representation of color; amount, how much blending to
/// perform; 0.0 >= and <= 1.0. Returns from, with a hue blended
/// towards to. Chroma and tone are constant.
/// 

@function hctHue($from, $to, $amount) {
    $ucs: cam16Ucs($from, $to, $amount);
    $ucsCam: cam16.fromInt($ucs);
    $fromCam: cam16.fromInt($from);
    $blended: hct.from(
        map.get($ucsCam, "hue"),
        map.get($fromCam, "chroma"),
        utils.lstarFromArgb($from)
    );
    @return map.get($blended, "argb");
}

///
/// Blend in CAM16-UCS space.
/// 
/// Takes 3 parameters. from, ARGB representation of color; to,
/// ARGB representation of color; amount, how much blending to
/// perform; 0.0 >= and <= 1.0. Returns from, blended towards to.
/// Hue, chroma, and tone will change.
/// 

@function cam16Ucs($from, $to, $amount) {
    $fromCam: cam16.fromInt($from);
    $toCam: cam16.fromInt($to);
    $fromJ: map.get($fromCam, "jstar");
    $fromA: map.get($fromCam, "astar");
    $fromB: map.get($fromCam, "bstar");
    $toJ: map.get($toCam, "jstar");
    $toA: map.get($toCam, "astar");
    $toB: map.get($toCam, "bstar");
    $jstar: $fromJ + ($toJ - $fromJ) * $amount;
    $astar: $fromA + ($toA - $fromA) * $amount;
    $bstar: $fromB + ($toB - $fromB) * $amount;
    @return cam16.toInt(cam16.fromUcs($jstar, $astar, $bstar));
}
